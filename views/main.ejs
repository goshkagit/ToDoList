<!doctype html>
<html lang="en">
<%include layouts/head.ejs%>
<body>
<div class="container">
    <div class="row">
        <div class="col-lg-2"></div>
        <div class="col-lg-8">
            <form id="form">
                <div class="form-group">
                    <div>
                    </div>
                    <label for="todo"></label>
                    <p></p>  <b>To DO:</b>
                    <p></p> <input type="text" class="form-control" id="input" placeholder=" ">
                    <p></p>
                    <div>
                        <button type="submit" class="btn btn-primary">Add</button>
                    </div>
                </div>
            </form>
        </div>
        <div class="col-lg-2"></div>
    </div>
    <div class="row">
        <div class="col-lg-2"></div>
        <div class="col-lg-8">
            <ul class="list-group" id="display">

            </ul>
        </div>
        <div class="col-lg-2"></div>
    </div>
    <br>
    <div class="row">
        <div class="col-lg-2"></div>
        <div class="col-lg-8">
            <div class="alert" role="alert" id="message">

            </div>
        </div>
        <div class="col-lg-2"></div>
    </div>

</div>
<script>$(document).ready(() => {
        const display = $("#display");
        const form = $("#form");
        const input = $("#input");

        const getAll = () => {
            fetch('/getAll', {method: "get"}).then((response) => {
                return response.json();
            }).then((data) => {
                console.log(data);
                listDraw(data);
            });
        };

        getAll();

        const reset = () => {
            input.val('');
        };


        const deleteTask = (todo, listItemID, deleteID) => {
            let deleteBtn = $(`#${deleteID}`);
            deleteBtn.click(() => {
                fetch(`/${todo._id}`, {
                    method: "delete"
                }).then((response) => {
                    return response.json();
                }).then((data) => {
                    if (data.ok === 1) {
                        $(`#${listItemID}`).remove();
                        $("#input").attr('placeholder', 'Deleted Successfully');
                    }
                });
            });
        };
        const build = (todo) => {
            return {
                editID: "edit_" + todo._id,
                deleteID: "delete_" + todo._id,
                listItemID: "listItem_" + todo._id,
                todoID: "todo_" + todo._id,
                formID: "form_" + todo._id
            }
        };


        const buildTemplate = (todo, ids) => {
            return `<li class="list-group-item" id="${ids.listItemID}">
                            <div class="row">
                                <div class="col-md-4" id="${ids.todoID}">${todo.todo}</div>
                                <div class="col-md-4"></div>
                                <div class="col-md-4 text-right">
                                    <button type="button" class="btn btn-secondary" id="${ids.editID}">Edit</button>
                                    <button type="button" class="btn btn-danger" id="${ids.deleteID}">Delete</button>
                                     <p></p>  <b>Edit:</b> <p></p> <input type="text" class="form-control" id="${ids.formID}" placeholder=" ">
                                </div>
                       </li>`;
        };

        const listDraw = (data) => {
            data.forEach((todo) => {
                let ids = build(todo);
                display.append(buildTemplate(todo, ids));
                edit(todo, ids.todoID, ids.editID);
                deleteTask(todo, ids.listItemID, ids.deleteID);
            });
        };
        form.submit((e) => {
            e.preventDefault();
            fetch('/', {
                method: 'post',
                body: JSON.stringify({todo: input.val()}),
                headers: {
                    "Content-Type": "application/json; charset=utf-8"
                },
                statusCode: {
                    400: () => {
                        $("#input").attr('placeholder', 'Wrong Input');
                    }
                },
            }).then((response) => {
                return response.json();
            }).then((data) => {
                if (!data.error) {
                    if (data.result.ok === 1 && data.result.n === 1) {
                        let ids = build(data.document);
                        display.append(buildTemplate(data.document, ids));
                        $("#input").attr('placeholder', 'Added Successfully');
                        edit(data.document, ids.todoID, ids.editID, ids.formID);
                        deleteTask(data.document, ids.listItemID, ids.deleteID);
                    }
                }
                else

                    reset();
            });
        });

        const edit = (todo, todoID, editID, formID) => {

            let editSb = $(`#${editID}`);

            editSb.click(() => {
                fetch(`/${todo._id}`, {
                    method: "put",
                    headers: {
                        "Content-Type": "application/json; charset=utf-8"
                    },
                    statusCode: {
                        400: () => {
                            $("#input").attr('placeholder', 'Wrong Input');
                        }
                    },

                    body: JSON.stringify({todo: $(`#${formID}`).val()})
                }).then((response) => {
                    return response.json();
                }).then((data) => {
                    if (data.ok === 1) {
                        let todoIndex = $(`#${todoID}`);
                        todoIndex.html(data.value.todo);
                        reset();
                    }
                });
            });
        };
    });

</script>
</body>
</html>